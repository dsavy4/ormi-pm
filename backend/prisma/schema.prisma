// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  password      String
  role          String   @default("TENANT") // ADMIN, MANAGER, TENANT
  phoneNumber   String?
  avatar        String?
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  properties    Property[]    @relation("PropertyManager")
  ownedProperties Property[]  @relation("PropertyOwner")
  units         Unit[]        @relation("UnitTenant")
  payments      Payment[]     @relation("PaymentTenant")
  maintenanceRequests MaintenanceRequest[] @relation("MaintenanceTenant")
  documents     Document[]    @relation("DocumentTenant")
  checklists    Checklist[]   @relation("ChecklistTenant")
  surveys       TenantSurvey[] @relation("SurveyTenant")
  paymentSchedules PaymentSchedule[] @relation("ScheduleTenant")

  @@map("users")
}

model Property {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  propertyType String  // APARTMENT, HOUSE, COMMERCIAL
  totalUnits  Int
  occupiedUnits Int    @default(0)
  monthlyRent Decimal  @db.Decimal(10, 2)
  propertyManagerId String?
  ownerId     String?  // Add ownerId field (nullable for existing data)
  images      String[] // Array of image URLs
  description String?
  amenities   String[] // Array of amenities
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  propertyManager User? @relation("PropertyManager", fields: [propertyManagerId], references: [id])
  owner         User?  @relation("PropertyOwner", fields: [ownerId], references: [id])
  units         Unit[]
  maintenanceRequests MaintenanceRequest[]

  @@map("properties")
}

model Unit {
  id          String   @id @default(cuid())
  unitNumber  String
  propertyId  String
  tenantId    String?
  bedrooms    Int
  bathrooms   Int
  squareFootage Int
  monthlyRent Decimal  @db.Decimal(10, 2)
  status      String   @default("VACANT") // VACANT, OCCUPIED, MAINTENANCE
  images      String[] // Array of image URLs
  amenities   String[] // Array of amenities
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  property   Property @relation(fields: [propertyId], references: [id])
  tenant     User?    @relation("UnitTenant", fields: [tenantId], references: [id])
  payments   Payment[]
  maintenanceRequests MaintenanceRequest[]

  @@map("units")
}

model Payment {
  id                    String   @id @default(cuid())
  amount                Decimal  @db.Decimal(10, 2)
  currency              String   @default("USD")
  status                String   @default("PENDING") // PENDING, PAID, FAILED, CANCELLED
  method                String   // STRIPE_CARD, STRIPE_ACH, CASH, CHECK
  stripePaymentIntentId String?
  stripePaymentId       String?
  unitId                String
  tenantId              String
  description           String?
  dueDate               DateTime
  paymentDate           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  unit   Unit @relation(fields: [unitId], references: [id])
  tenant User @relation("PaymentTenant", fields: [tenantId], references: [id])

  @@map("payments")
}

model MaintenanceRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status      String   @default("SUBMITTED") // SUBMITTED, IN_PROGRESS, COMPLETED, CANCELLED
  unitId      String
  tenantId    String
  propertyId  String
  assignedTo  String?
  images      String[] // Array of image URLs
  estimatedCost Decimal? @db.Decimal(10, 2)
  actualCost  Decimal? @db.Decimal(10, 2)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  unit     Unit @relation(fields: [unitId], references: [id])
  tenant   User @relation("MaintenanceTenant", fields: [tenantId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@map("maintenance_requests")
}

model Document {
  id          String   @id @default(cuid())
  fileName    String
  fileUrl     String
  fileType    String   // LEASE, RECEIPT, INVOICE, OTHER
  fileSize    Int
  tenantId    String
  uploadedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant User @relation("DocumentTenant", fields: [tenantId], references: [id])

  @@map("documents")
}

model Checklist {
  id          String   @id @default(cuid())
  type        String   // MOVE_IN, MOVE_OUT, INSPECTION
  title       String
  description String?
  tenantId    String
  items       Json     // Array of checklist items
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant User @relation("ChecklistTenant", fields: [tenantId], references: [id])

  @@map("checklists")
}

model TenantSurvey {
  id          String   @id @default(cuid())
  tenantId    String
  propertyId  String
  rating      Int      // 1-5 stars
  feedback    String?
  category    String   // GENERAL, MAINTENANCE, COMMUNICATION, OVERALL
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant User @relation("SurveyTenant", fields: [tenantId], references: [id])

  @@map("tenant_surveys")
}

model PaymentSchedule {
  id          String   @id @default(cuid())
  tenantId    String
  unitId      String
  amount      Decimal  @db.Decimal(10, 2)
  frequency   String   // MONTHLY, WEEKLY, YEARLY
  startDate   DateTime
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant User @relation("ScheduleTenant", fields: [tenantId], references: [id])

  @@map("payment_schedules")
}

model CommunityAnnouncement {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("community_announcements")
}
