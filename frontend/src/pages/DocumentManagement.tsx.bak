import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  FileText,
  Download,
  Upload,
  Trash2,
  Eye,
  Edit,
  Search,
  Filter,
  Plus,
  MoreHorizontal,
  Calendar,
  User,
  Building,
  DollarSign,
  Clock,
  CheckCircle,
  AlertTriangle,
  Star,
  Heart,
  ThumbsUp,
  ThumbsDown,
  Smile,
  Frown,
  Meh,
  X,
  RefreshCw,
  File,
  Folder,
  FolderOpen,
  Archive,
  Lock,
  Unlock,
  Key,
  Shield,
  Zap,
  Sparkles,
  Award,
  TrendingUp,
  BarChart3,
  PieChart,
  Activity,
  Target,
  Flag,
  Home,
  Building2,
  Warehouse,
  Factory,
  Store,
  Office,
  Hotel,
  School,
  Hospital,
  Church,
  Bank,
  Car,
  Truck,
  Bike,
  Plane,
  Ship,
  Train,
  Bus,
  Taxi,
  Helicopter,
  Rocket,
  Satellite,
  Wifi,
  Bluetooth,
  Radio,
  Tv,
  Monitor,
  Smartphone,
  Tablet,
  Laptop,
  Desktop,
  Server,
  Database,
  Cloud,
  HardDrive,
  Usb,
  Cable,
  Power,
  Battery,
  Solar,
  Wind,
  Water,
  Fire,
  Snow,
  Rain,
  Sun,
  Moon,
  Star as StarIcon
} from 'lucide-react';

// UI Components
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Textarea } from '@/components/ui/textarea';

interface Document {
  id: string;
  name: string;
  type: 'pdf' | 'doc' | 'docx' | 'xls' | 'xlsx' | 'ppt' | 'pptx' | 'image' | 'video' | 'audio';
  size: number;
  uploadedBy: string;
  uploadedDate: string;
  lastModified: string;
  status: 'draft' | 'pending' | 'approved' | 'rejected' | 'archived';
  category: string;
  tags: string[];
  version: string;
  isSigned: boolean;
  isTemplate: boolean;
  isPublic: boolean;
  downloadCount: number;
  viewCount: number;
  thumbnail?: string;
  description?: string;
  metadata: {
    pages?: number;
    duration?: number;
    resolution?: string;
    format?: string;
  };
}

interface DocumentTemplate {
  id: string;
  name: string;
  category: string;
  description: string;
  version: string;
  lastUpdated: string;
  usageCount: number;
  isActive: boolean;
  fields: Array<{
    name: string;
    type: 'text' | 'date' | 'number' | 'email' | 'signature' | 'checkbox';
    required: boolean;
    placeholder?: string;
  }>;
}

interface SignatureRequest {
  id: string;
  documentId: string;
  documentName: string;
  requestedBy: string;
  requestedDate: string;
  dueDate: string;
  status: 'pending' | 'signed' | 'expired' | 'cancelled';
  signers: Array<{
    name: string;
    email: string;
    status: 'pending' | 'signed' | 'declined';
    signedDate?: string;
  }>;
  message?: string;
}

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5
    }
  }
};

export function DocumentManagement() {
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('documents');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);
  const [showUploadDialog, setShowUploadDialog] = useState(false);
  const [showTemplateDialog, setShowTemplateDialog] = useState(false);
  const [showSignatureDialog, setShowSignatureDialog] = useState(false);

  // Mock data - replace with real API calls
  const documents: Document[] = [
    {
      id: '1',
      name: 'Lease Agreement - Unit 101',
      type: 'pdf',
      size: 2048576,
      uploadedBy: 'Sarah Johnson',
      uploadedDate: '2024-01-15T10:00:00Z',
      lastModified: '2024-01-18T14:30:00Z',
      status: 'approved',
      category: 'Leases',
      tags: ['lease', 'agreement', 'unit-101'],
      version: '1.2',
      isSigned: true,
      isTemplate: false,
      isPublic: false,
      downloadCount: 15,
      viewCount: 45,
      description: 'Standard lease agreement for Unit 101',
      metadata: {
        pages: 8,
        format: 'PDF',
      },
    },
    {
      id: '2',
      name: 'Maintenance Request Form',
      type: 'docx',
      size: 512000,
      uploadedBy: 'Michael Chen',
      uploadedDate: '2024-01-10T09:00:00Z',
      lastModified: '2024-01-10T09:00:00Z',
      status: 'draft',
      category: 'Forms',
      tags: ['maintenance', 'form', 'template'],
      version: '2.1',
      isSigned: false,
      isTemplate: true,
      isPublic: true,
      downloadCount: 28,
      viewCount: 67,
      description: 'Template for maintenance request forms',
      metadata: {
        pages: 2,
        format: 'DOCX',
      },
    },
    {
      id: '3',
      name: 'Property Inspection Report',
      type: 'pdf',
      size: 3145728,
      uploadedBy: 'David Rodriguez',
      uploadedDate: '2024-01-12T16:00:00Z',
      lastModified: '2024-01-12T16:00:00Z',
      status: 'pending',
      category: 'Reports',
      tags: ['inspection', 'report', 'property'],
      version: '1.0',
      isSigned: false,
      isTemplate: false,
      isPublic: false,
      downloadCount: 3,
      viewCount: 12,
      description: 'Quarterly property inspection report',
      metadata: {
        pages: 15,
        format: 'PDF',
      },
    },
  ];

  const templates: DocumentTemplate[] = [
    {
      id: '1',
      name: 'Standard Lease Agreement',
      category: 'Leases',
      description: 'Standard residential lease agreement template',
      version: '3.2',
      lastUpdated: '2024-01-15T10:00:00Z',
      usageCount: 156,
      isActive: true,
      fields: [
        { name: 'tenant_name', type: 'text', required: true, placeholder: 'Tenant Full Name' },
        { name: 'property_address', type: 'text', required: true, placeholder: 'Property Address' },
        { name: 'rent_amount', type: 'number', required: true, placeholder: 'Monthly Rent' },
        { name: 'lease_start', type: 'date', required: true },
        { name: 'lease_end', type: 'date', required: true },
        { name: 'tenant_signature', type: 'signature', required: true },
        { name: 'landlord_signature', type: 'signature', required: true },
      ],
    },
    {
      id: '2',
      name: 'Maintenance Request Form',
      category: 'Forms',
      description: 'Standard maintenance request form template',
      version: '2.1',
      lastUpdated: '2024-01-10T09:00:00Z',
      usageCount: 89,
      isActive: true,
      fields: [
        { name: 'tenant_name', type: 'text', required: true, placeholder: 'Tenant Name' },
        { name: 'unit_number', type: 'text', required: true, placeholder: 'Unit Number' },
        { name: 'issue_description', type: 'text', required: true, placeholder: 'Describe the issue' },
        { name: 'priority', type: 'text', required: true, placeholder: 'Priority Level' },
        { name: 'contact_phone', type: 'text', required: true, placeholder: 'Contact Phone' },
        { name: 'tenant_signature', type: 'signature', required: true },
      ],
    },
  ];

  const signatureRequests: SignatureRequest[] = [
    {
      id: '1',
      documentId: '1',
      documentName: 'Lease Agreement - Unit 101',
      requestedBy: 'Sarah Johnson',
      requestedDate: '2024-01-15T10:00:00Z',
      dueDate: '2024-01-22T10:00:00Z',
      status: 'signed',
      signers: [
        {
          name: 'John Smith',
          email: 'john.smith@email.com',
          status: 'signed',
          signedDate: '2024-01-16T14:30:00Z',
        },
        {
          name: 'Sarah Johnson',
          email: 'sarah.johnson@ormi.com',
          status: 'signed',
          signedDate: '2024-01-17T09:15:00Z',
        },
      ],
      message: 'Please review and sign the lease agreement for Unit 101.',
    },
    {
      id: '2',
      documentId: '3',
      documentName: 'Property Inspection Report',
      requestedBy: 'David Rodriguez',
      requestedDate: '2024-01-12T16:00:00Z',
      dueDate: '2024-01-19T16:00:00Z',
      status: 'pending',
      signers: [
        {
          name: 'Michael Chen',
          email: 'michael.chen@ormi.com',
          status: 'pending',
        },
      ],
      message: 'Please review and approve the property inspection report.',
    },
  ];

  const getFileIcon = (type: string) => {
    switch (type) {
      case 'pdf':
        return <FileText className="h-8 w-8 text-red-600" />;
      case 'doc':
      case 'docx':
        return <FileText className="h-8 w-8 text-blue-600" />;
      case 'xls':
      case 'xlsx':
        return <FileText className="h-8 w-8 text-green-600" />;
      case 'ppt':
      case 'pptx':
        return <FileText className="h-8 w-8 text-orange-600" />;
      case 'image':
        return <FileText className="h-8 w-8 text-purple-600" />;
      case 'video':
        return <FileText className="h-8 w-8 text-pink-600" />;
      case 'audio':
        return <FileText className="h-8 w-8 text-indigo-600" />;
      default:
        return <File className="h-8 w-8 text-gray-600" />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'draft':
        return <Badge variant="outline"><Edit className="h-3 w-3 mr-1" />Draft</Badge>;
      case 'pending':
        return <Badge variant="secondary"><Clock className="h-3 w-3 mr-1" />Pending</Badge>;
      case 'approved':
        return <Badge variant="default" className="bg-green-100 text-green-800"><CheckCircle className="h-3 w-3 mr-1" />Approved</Badge>;
      case 'rejected':
        return <Badge variant="destructive"><X className="h-3 w-3 mr-1" />Rejected</Badge>;
      case 'archived':
        return <Badge variant="outline"><Archive className="h-3 w-3 mr-1" />Archived</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="space-y-6"
    >
      {/* Header */}
      <motion.div variants={itemVariants} className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <div className="flex items-center gap-3">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Document Management</h1>
            <Badge variant="outline" className="bg-gradient-to-r from-blue-50 to-green-50 dark:from-blue-900/20 dark:to-green-900/20">
              <FileText className="h-3 w-3 mr-1" />
              Professional
            </Badge>
          </div>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Manage documents, templates, and e-signatures
          </p>
        </div>
        <div className="mt-4 sm:mt-0 flex items-center space-x-3">
          <Select value={viewMode} onValueChange={(value: 'grid' | 'list') => setViewMode(value)}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="grid">Grid View</SelectItem>
              <SelectItem value="list">List View</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Button size="sm" className="btn-ormi" onClick={() => setShowUploadDialog(true)}>
            <Upload className="h-4 w-4 mr-2" />
            Upload Document
          </Button>
        </div>
      </motion.div>

      {/* Main Content Tabs */}
      <motion.div variants={itemVariants}>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="documents">Documents</TabsTrigger>
            <TabsTrigger value="templates">Templates</TabsTrigger>
            <TabsTrigger value="signatures">E-Signatures</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>

          {/* Documents Tab */}
          <TabsContent value="documents" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="pt-6">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Search</label>
                    <Input
                      placeholder="Search documents..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Category</label>
                    <Select value={filterCategory} onValueChange={setFilterCategory}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Categories</SelectItem>
                        <SelectItem value="Leases">Leases</SelectItem>
                        <SelectItem value="Forms">Forms</SelectItem>
                        <SelectItem value="Reports">Reports</SelectItem>
                        <SelectItem value="Contracts">Contracts</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Status</label>
                    <Select value={filterStatus} onValueChange={setFilterStatus}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Status</SelectItem>
                        <SelectItem value="draft">Draft</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                        <SelectItem value="approved">Approved</SelectItem>
                        <SelectItem value="rejected">Rejected</SelectItem>
                        <SelectItem value="archived">Archived</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">&nbsp;</label>
                    <div className="text-sm text-gray-500">
                      {documents.length} documents
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Documents Grid/List */}
            {viewMode === 'grid' ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {documents.map((document) => (
                  <Card key={document.id} className="card-hover">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          {getFileIcon(document.type)}
                          <div>
                            <CardTitle className="text-lg">{document.name}</CardTitle>
                            <CardDescription>{document.category}</CardDescription>
                          </div>
                        </div>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem onClick={() => setSelectedDocument(document)}>
                              <Eye className="mr-2 h-4 w-4" />
                              View Document
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Download className="mr-2 h-4 w-4" />
                              Download
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Edit className="mr-2 h-4 w-4" />
                              Edit
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Send className="mr-2 h-4 w-4" />
                              Send for Signature
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem>
                              <Share2 className="mr-2 h-4 w-4" />
                              Share
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Copy className="mr-2 h-4 w-4" />
                              Duplicate
                            </DropdownMenuItem>
                            <DropdownMenuItem className="text-red-600">
                              <Trash2 className="mr-2 h-4 w-4" />
                              Delete
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">Status</span>
                        {getStatusBadge(document.status)}
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">Size</span>
                        <span className="text-sm font-medium">{formatFileSize(document.size)}</span>
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">Version</span>
                        <span className="text-sm font-medium">{document.version}</span>
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">Uploaded</span>
                        <span className="text-sm font-medium">{formatDate(document.uploadedDate)}</span>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {document.isSigned && (
                          <Badge variant="outline" className="text-green-600">
                            <FileSignature className="h-3 w-3 mr-1" />
                            Signed
                          </Badge>
                        )}
                        {document.isTemplate && (
                          <Badge variant="outline" className="text-blue-600">
                            <FilePlus className="h-3 w-3 mr-1" />
                            Template
                          </Badge>
                        )}
                        {document.isPublic ? (
                          <Badge variant="outline" className="text-green-600">
                            <Unlock className="h-3 w-3 mr-1" />
                            Public
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="text-gray-600">
                            <Lock className="h-3 w-3 mr-1" />
                            Private
                          </Badge>
                        )}
                      </div>
                      
                      <div className="flex items-center justify-between text-sm text-gray-500">
                        <span>{document.downloadCount} downloads</span>
                        <span>{document.viewCount} views</span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="pt-6">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Document</TableHead>
                        <TableHead>Category</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Size</TableHead>
                        <TableHead>Uploaded</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {documents.map((document) => (
                        <TableRow key={document.id}>
                          <TableCell>
                            <div className="flex items-center gap-3">
                              {getFileIcon(document.type)}
                              <div>
                                <div className="font-medium">{document.name}</div>
                                <div className="text-sm text-gray-500">
                                  v{document.version} • {document.uploadedBy}
                                </div>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>{document.category}</TableCell>
                          <TableCell>{getStatusBadge(document.status)}</TableCell>
                          <TableCell>{formatFileSize(document.size)}</TableCell>
                          <TableCell>{formatDate(document.uploadedDate)}</TableCell>
                          <TableCell>
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" className="h-8 w-8 p-0">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem onClick={() => setSelectedDocument(document)}>
                                  <Eye className="mr-2 h-4 w-4" />
                                  View
                                </DropdownMenuItem>
                                <DropdownMenuItem>
                                  <Download className="mr-2 h-4 w-4" />
                                  Download
                                </DropdownMenuItem>
                                <DropdownMenuItem>
                                  <Edit className="mr-2 h-4 w-4" />
                                  Edit
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          {/* Templates Tab */}
          <TabsContent value="templates" className="space-y-6">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold">Document Templates</h3>
              <Button onClick={() => setShowTemplateDialog(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Create Template
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {templates.map((template) => (
                <Card key={template.id} className="card-hover">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div>
                        <CardTitle className="text-lg">{template.name}</CardTitle>
                        <CardDescription>{template.category}</CardDescription>
                      </div>
                      <Badge variant={template.isActive ? 'default' : 'outline'}>
                        {template.isActive ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <p className="text-sm text-gray-600">{template.description}</p>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Version</span>
                      <span className="text-sm font-medium">{template.version}</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Usage Count</span>
                      <span className="text-sm font-medium">{template.usageCount}</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Last Updated</span>
                      <span className="text-sm font-medium">{formatDate(template.lastUpdated)}</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Fields</span>
                      <span className="text-sm font-medium">{template.fields.length}</span>
                    </div>
                    
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm" className="flex-1">
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                      </Button>
                      <Button size="sm" className="flex-1">
                        <FilePlus className="h-4 w-4 mr-2" />
                        Use Template
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* E-Signatures Tab */}
          <TabsContent value="signatures" className="space-y-6">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold">E-Signature Requests</h3>
              <Button onClick={() => setShowSignatureDialog(true)}>
                <Send className="h-4 w-4 mr-2" />
                New Request
              </Button>
            </div>

            <div className="space-y-4">
              {signatureRequests.map((request) => (
                <Card key={request.id}>
                  <CardContent className="pt-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                          <FileSignature className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-semibold">{request.documentName}</h4>
                          <p className="text-sm text-gray-500">
                            Requested by {request.requestedBy} • Due {formatDate(request.dueDate)}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <Badge 
                          variant={request.status === 'signed' ? 'default' : 'secondary'}
                          className={request.status === 'signed' ? 'bg-green-100 text-green-800' : ''}
                        >
                          {request.status.charAt(0).toUpperCase() + request.status.slice(1)}
                        </Badge>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>
                              <Eye className="mr-2 h-4 w-4" />
                              View Details
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Send className="mr-2 h-4 w-4" />
                              Resend
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Clock className="mr-2 h-4 w-4" />
                              Extend Deadline
                            </DropdownMenuItem>
                            <DropdownMenuItem className="text-red-600">
                              <X className="mr-2 h-4 w-4" />
                              Cancel Request
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </div>
                    
                    {request.message && (
                      <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                        <p className="text-sm text-gray-600">{request.message}</p>
                      </div>
                    )}
                    
                    <div className="mt-4">
                      <h5 className="text-sm font-medium mb-2">Signers</h5>
                      <div className="space-y-2">
                        {request.signers.map((signer, index) => (
                          <div key={index} className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded">
                            <div>
                              <p className="text-sm font-medium">{signer.name}</p>
                              <p className="text-xs text-gray-500">{signer.email}</p>
                            </div>
                            <Badge 
                              variant={signer.status === 'signed' ? 'default' : 'outline'}
                              className={signer.status === 'signed' ? 'bg-green-100 text-green-800' : ''}
                            >
                              {signer.status.charAt(0).toUpperCase() + signer.status.slice(1)}
                            </Badge>
                          </div>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Document Settings</CardTitle>
                <CardDescription>
                  Configure document management preferences
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium">Auto-versioning</label>
                    <p className="text-sm text-gray-500">
                      Automatically create new versions when documents are modified
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Document retention</label>
                    <p className="text-sm text-gray-500">
                      Automatically archive documents after specified period
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium">E-signature expiration</label>
                    <p className="text-sm text-gray-500">
                      Default expiration time for signature requests
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>

      {/* Document Details Dialog */}
      <Dialog open={!!selectedDocument} onOpenChange={() => setSelectedDocument(null)}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Document Details</DialogTitle>
          </DialogHeader>
          {selectedDocument && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">Document Name</label>
                  <p className="font-medium">{selectedDocument.name}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Category</label>
                  <p className="font-medium">{selectedDocument.category}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Status</label>
                  <div className="mt-1">{getStatusBadge(selectedDocument.status)}</div>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Version</label>
                  <p className="font-medium">{selectedDocument.version}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">File Size</label>
                  <p className="font-medium">{formatFileSize(selectedDocument.size)}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Uploaded By</label>
                  <p className="font-medium">{selectedDocument.uploadedBy}</p>
                </div>
              </div>
              
              {selectedDocument.description && (
                <div>
                  <label className="text-sm font-medium text-gray-500">Description</label>
                  <p className="mt-1">{selectedDocument.description}</p>
                </div>
              )}
              
              <div>
                <label className="text-sm font-medium text-gray-500">Tags</label>
                <div className="flex flex-wrap gap-2 mt-2">
                  {selectedDocument.tags.map((tag) => (
                    <Badge key={tag} variant="outline">{tag}</Badge>
                  ))}
                </div>
              </div>
              
              <Separator />
              
              <div className="flex gap-2">
                <Button variant="outline" className="flex-1">
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button variant="outline" className="flex-1">
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </Button>
                <Button className="flex-1">
                  <Send className="h-4 w-4 mr-2" />
                  Send for Signature
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </motion.div>
  );
} 