import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  Wrench,
  Clock,
  CheckCircle,
  AlertTriangle,
  Plus,
  Search,
  Filter,
  Calendar,
  DollarSign,
  User,
  Phone,
  Mail,
  MapPin,
  Star,
  Eye,
  Edit,
  Trash2,
  Download,
  Upload,
  FileText,
  Image,
  Camera,
  Video,
  Mic,
  Send,
  MessageSquare,
  Bell,
  Settings,
  ChevronDown,
  ChevronUp,
  ChevronRight,
  ChevronLeft,
  ArrowRight,
  ArrowLeft,
  RefreshCw,
  Zap,
  Sparkles,
  Award,
  TrendingUp,
  BarChart3,
  PieChart,
  Activity,
  Target,
  Flag,
  Shield,
  Lock,
  Unlock,
  Key,
  Home,
  Building2,
  Warehouse,
  Factory,
  Store,
  Building,
  School,
  Church,
  Car,
  Truck,
  Bike,
  Plane,
  Ship,
  Train,
  Bus,
  Rocket,
  Satellite,
  Wifi,
  Bluetooth,
  Radio,
  Tv,
  Monitor,
  Smartphone,
  Tablet,
  Laptop,
  Server,
  Database,
  Cloud,
  HardDrive,
  Usb,
  Cable,
  Power,
  Battery,
  Wind,
  Sun,
  Moon,
  Star as StarIcon,
  Heart,
  ThumbsUp,
  ThumbsDown,
  Smile,
  Frown,
  Meh,
  X,
  MoreHorizontal
} from 'lucide-react';

// UI Components
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuLabel, 
  DropdownMenuSeparator, 
  DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';

// API
import { propertiesApi, tenantApi } from '@/lib/api';

interface Vendor {
  id: string;
  name: string;
  email: string;
  phone: string;
  address: string;
  specialties: string[];
  rating: number;
  totalJobs: number;
  averageRating: number;
  isVerified: boolean;
  insurance: boolean;
  license: string;
  availability: 'available' | 'busy' | 'unavailable';
  hourlyRate: number;
  responseTime: number; // in hours
}

interface WorkOrder {
  id: string;
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  status: 'pending' | 'assigned' | 'in_progress' | 'completed' | 'cancelled';
  category: string;
  propertyId: string;
  unitId: string;
  tenantId: string;
  assignedVendorId?: string;
  estimatedCost: number;
  actualCost?: number;
  estimatedDuration: number; // in hours
  actualDuration?: number;
  requestedDate: string;
  scheduledDate?: string;
  completedDate?: string;
  images: string[];
  notes: string;
  qualityRating?: number;
  warrantyInfo?: string;
}

interface MaintenanceAnalytics {
  totalRequests: number;
  completedRequests: number;
  pendingRequests: number;
  averageResponseTime: number;
  averageCost: number;
  totalSpent: number;
  vendorPerformance: Array<{
    vendorId: string;
    vendorName: string;
    completedJobs: number;
    averageRating: number;
    averageResponseTime: number;
  }>;
  categoryBreakdown: Array<{
    category: string;
    count: number;
    totalCost: number;
  }>;
}

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5
    }
  }
};

export function AdvancedMaintenance() {
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('work-orders');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterPriority, setFilterPriority] = useState('all');
  const [filterCategory, setFilterCategory] = useState('all');
  const [selectedWorkOrder, setSelectedWorkOrder] = useState<WorkOrder | null>(null);
  const [selectedVendor, setSelectedVendor] = useState<Vendor | null>(null);
  const [showWorkOrderDialog, setShowWorkOrderDialog] = useState(false);
  const [showVendorDialog, setShowVendorDialog] = useState(false);
  const [showAddWorkOrderDialog, setShowAddWorkOrderDialog] = useState(false);
  const [showAddVendorDialog, setShowAddVendorDialog] = useState(false);

  // Mock data - replace with real API calls
  const vendors: Vendor[] = [
    {
      id: '1',
      name: 'ABC Plumbing Services',
      email: 'contact@abcplumbing.com',
      phone: '+1-555-0101',
      address: '123 Main St, Los Angeles, CA',
      specialties: ['Plumbing', 'HVAC', 'Emergency Repairs'],
      rating: 4.8,
      totalJobs: 156,
      averageRating: 4.8,
      isVerified: true,
      insurance: true,
      license: 'CA-12345',
      availability: 'available',
      hourlyRate: 85,
      responseTime: 2,
    },
    {
      id: '2',
      name: 'Elite Electrical Solutions',
      email: 'info@eliteelectrical.com',
      phone: '+1-555-0102',
      address: '456 Electric Ave, San Francisco, CA',
      specialties: ['Electrical', 'Lighting', 'Security Systems'],
      rating: 4.9,
      totalJobs: 203,
      averageRating: 4.9,
      isVerified: true,
      insurance: true,
      license: 'CA-67890',
      availability: 'available',
      hourlyRate: 95,
      responseTime: 1.5,
    },
    {
      id: '3',
      name: 'Pro Paint & Drywall',
      email: 'service@propaint.com',
      phone: '+1-555-0103',
      address: '789 Paint Blvd, San Diego, CA',
      specialties: ['Painting', 'Drywall', 'Interior Design'],
      rating: 4.7,
      totalJobs: 89,
      averageRating: 4.7,
      isVerified: true,
      insurance: true,
      license: 'CA-11111',
      availability: 'busy',
      hourlyRate: 65,
      responseTime: 4,
    },
  ];

  const workOrders: WorkOrder[] = [
    {
      id: '1',
      title: 'Kitchen Sink Leak',
      description: 'Kitchen sink is leaking under the cabinet. Water damage visible.',
      priority: 'high',
      status: 'in_progress',
      category: 'Plumbing',
      propertyId: '1',
      unitId: '101',
      tenantId: '1',
      assignedVendorId: '1',
      estimatedCost: 150,
      actualCost: 145,
      estimatedDuration: 2,
      actualDuration: 1.5,
      requestedDate: '2024-01-15T10:00:00Z',
      scheduledDate: '2024-01-16T09:00:00Z',
      completedDate: '2024-01-16T10:30:00Z',
      images: [
        'https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=800&h=600&fit=crop',
      ],
      notes: 'Fixed leak and replaced damaged pipe. Tenant satisfied.',
      qualityRating: 5,
      warrantyInfo: '1 year warranty on parts and labor',
    },
    {
      id: '2',
      title: 'Electrical Outlet Not Working',
      description: 'Bedroom outlet stopped working. No power to devices.',
      priority: 'medium',
      status: 'assigned',
      category: 'Electrical',
      propertyId: '1',
      unitId: '102',
      tenantId: '2',
      assignedVendorId: '2',
      estimatedCost: 120,
      estimatedDuration: 1.5,
      requestedDate: '2024-01-17T14:00:00Z',
      scheduledDate: '2024-01-18T10:00:00Z',
      images: [
        'https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=800&h=600&fit=crop',
      ],
      notes: 'Scheduled for tomorrow morning.',
    },
    {
      id: '3',
      title: 'AC Unit Not Cooling',
      description: 'Air conditioning unit is running but not producing cold air.',
      priority: 'urgent',
      status: 'pending',
      category: 'HVAC',
      propertyId: '2',
      unitId: '201',
      tenantId: '3',
      estimatedCost: 300,
      estimatedDuration: 3,
      requestedDate: '2024-01-18T16:00:00Z',
      images: [
        'https://images.unsplash.com/photo-1581578731548-c64695cc6952?w=800&h=600&fit=crop',
      ],
      notes: 'Emergency request - tenant has medical condition requiring cool environment.',
    },
  ];

  const analytics: MaintenanceAnalytics = {
    totalRequests: 45,
    completedRequests: 38,
    pendingRequests: 7,
    averageResponseTime: 2.3,
    averageCost: 185,
    totalSpent: 7030,
    vendorPerformance: [
      {
        vendorId: '1',
        vendorName: 'ABC Plumbing Services',
        completedJobs: 156,
        averageRating: 4.8,
        averageResponseTime: 2.1,
      },
      {
        vendorId: '2',
        vendorName: 'Elite Electrical Solutions',
        completedJobs: 203,
        averageRating: 4.9,
        averageResponseTime: 1.5,
      },
      {
        vendorId: '3',
        vendorName: 'Pro Paint & Drywall',
        completedJobs: 89,
        averageRating: 4.7,
        averageResponseTime: 4.2,
      },
    ],
    categoryBreakdown: [
      { category: 'Plumbing', count: 15, totalCost: 2250 },
      { category: 'Electrical', count: 12, totalCost: 1440 },
      { category: 'HVAC', count: 8, totalCost: 2400 },
      { category: 'General', count: 10, totalCost: 940 },
    ],
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'pending':
        return <Badge variant="secondary"><Clock className="h-3 w-3 mr-1" />Pending</Badge>;
      case 'assigned':
        return <Badge variant="outline"><User className="h-3 w-3 mr-1" />Assigned</Badge>;
      case 'in_progress':
        return <Badge variant="default"><Wrench className="h-3 w-3 mr-1" />In Progress</Badge>;
      case 'completed':
        return <Badge variant="default" className="bg-green-100 text-green-800"><CheckCircle className="h-3 w-3 mr-1" />Completed</Badge>;
      case 'cancelled':
        return <Badge variant="destructive"><X className="h-3 w-3 mr-1" />Cancelled</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case 'low':
        return <Badge variant="outline" className="text-blue-600">Low</Badge>;
      case 'medium':
        return <Badge variant="outline" className="text-yellow-600">Medium</Badge>;
      case 'high':
        return <Badge variant="outline" className="text-orange-600">High</Badge>;
      case 'urgent':
        return <Badge variant="destructive">Urgent</Badge>;
      default:
        return <Badge variant="outline">{priority}</Badge>;
    }
  };

  const getVendorAvailabilityBadge = (availability: string) => {
    switch (availability) {
      case 'available':
        return <Badge variant="default" className="bg-green-100 text-green-800">Available</Badge>;
      case 'busy':
        return <Badge variant="outline" className="text-yellow-600">Busy</Badge>;
      case 'unavailable':
        return <Badge variant="destructive">Unavailable</Badge>;
      default:
        return <Badge variant="outline">{availability}</Badge>;
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <motion.div
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      className="space-y-6"
    >
      {/* Header */}
      <motion.div variants={itemVariants} className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <div className="flex items-center gap-3">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Advanced Maintenance</h1>
            <Badge variant="outline" className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20">
              <Wrench className="h-3 w-3 mr-1" />
              Professional
            </Badge>
          </div>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Manage work orders, vendors, and maintenance operations
          </p>
        </div>
        <div className="mt-4 sm:mt-0 flex items-center space-x-3">
          <Button variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Button size="sm" className="btn-ormi" onClick={() => setShowAddWorkOrderDialog(true)}>
            <Plus className="h-4 w-4 mr-2" />
            New Work Order
          </Button>
        </div>
      </motion.div>

      {/* Analytics Cards */}
      <motion.div variants={itemVariants} className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Requests</CardTitle>
            <Wrench className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.totalRequests}</div>
            <p className="text-xs text-muted-foreground">
              {analytics.completedRequests} completed
            </p>
          </CardContent>
        </Card>

        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Response Time</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.averageResponseTime}h</div>
            <p className="text-xs text-muted-foreground">
              Average response time
            </p>
          </CardContent>
        </Card>

        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Spent</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(analytics.totalSpent)}</div>
            <p className="text-xs text-muted-foreground">
              {formatCurrency(analytics.averageCost)} average per job
            </p>
          </CardContent>
        </Card>

        <Card className="card-hover">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Vendors</CardTitle>
            <User className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{vendors.length}</div>
            <p className="text-xs text-muted-foreground">
              Verified contractors
            </p>
          </CardContent>
        </Card>
      </motion.div>

      {/* Main Content Tabs */}
      <motion.div variants={itemVariants}>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="work-orders">Work Orders</TabsTrigger>
            <TabsTrigger value="vendors">Vendors</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>

          {/* Work Orders Tab */}
          <TabsContent value="work-orders" className="space-y-6">
            {/* Filters */}
            <Card>
              <CardContent className="pt-6">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Search</label>
                    <Input
                      placeholder="Search work orders..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Status</label>
                    <Select value={filterStatus} onValueChange={setFilterStatus}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Status</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                        <SelectItem value="assigned">Assigned</SelectItem>
                        <SelectItem value="in_progress">In Progress</SelectItem>
                        <SelectItem value="completed">Completed</SelectItem>
                        <SelectItem value="cancelled">Cancelled</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Priority</label>
                    <Select value={filterPriority} onValueChange={setFilterPriority}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Priorities</SelectItem>
                        <SelectItem value="low">Low</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="high">High</SelectItem>
                        <SelectItem value="urgent">Urgent</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Category</label>
                    <Select value={filterCategory} onValueChange={setFilterCategory}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Categories</SelectItem>
                        <SelectItem value="plumbing">Plumbing</SelectItem>
                        <SelectItem value="electrical">Electrical</SelectItem>
                        <SelectItem value="hvac">HVAC</SelectItem>
                        <SelectItem value="general">General</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Work Orders Table */}
            <Card>
              <CardHeader>
                <CardTitle>Work Orders</CardTitle>
                <CardDescription>
                  Manage and track maintenance requests
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Work Order</TableHead>
                      <TableHead>Property</TableHead>
                      <TableHead>Priority</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Vendor</TableHead>
                      <TableHead>Cost</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {workOrders.map((workOrder) => (
                      <TableRow key={workOrder.id}>
                        <TableCell>
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded flex items-center justify-center">
                              <Wrench className="h-4 w-4 text-blue-600" />
                            </div>
                            <div>
                              <div className="font-medium">{workOrder.title}</div>
                              <div className="text-sm text-gray-500">
                                {workOrder.category}
                              </div>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div>
                            <div className="font-medium">Property {workOrder.propertyId}</div>
                            <div className="text-sm text-gray-500">Unit {workOrder.unitId}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          {getPriorityBadge(workOrder.priority)}
                        </TableCell>
                        <TableCell>
                          {getStatusBadge(workOrder.status)}
                        </TableCell>
                        <TableCell>
                          {workOrder.assignedVendorId ? (
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4" />
                              <span className="text-sm">
                                {vendors.find(v => v.id === workOrder.assignedVendorId)?.name}
                              </span>
                            </div>
                          ) : (
                            <span className="text-sm text-gray-500">Unassigned</span>
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="font-medium">
                            {workOrder.actualCost 
                              ? formatCurrency(workOrder.actualCost)
                              : formatCurrency(workOrder.estimatedCost)
                            }
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm">
                            <div>{formatDate(workOrder.requestedDate)}</div>
                            {workOrder.scheduledDate && (
                              <div className="text-gray-500">
                                Scheduled: {formatDate(workOrder.scheduledDate)}
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" className="h-8 w-8 p-0">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Actions</DropdownMenuLabel>
                              <DropdownMenuItem onClick={() => setSelectedWorkOrder(workOrder)}>
                                <Eye className="mr-2 h-4 w-4" />
                                View Details
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Edit className="mr-2 h-4 w-4" />
                                Edit Work Order
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <Send className="mr-2 h-4 w-4" />
                                Assign Vendor
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem>
                                <Download className="mr-2 h-4 w-4" />
                                Download Report
                              </DropdownMenuItem>
                              <DropdownMenuItem className="text-red-600">
                                <Trash2 className="mr-2 h-4 w-4" />
                                Cancel Work Order
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Vendors Tab */}
          <TabsContent value="vendors" className="space-y-6">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold">Vendor Management</h3>
              <Button onClick={() => setShowAddVendorDialog(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Add Vendor
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {vendors.map((vendor) => (
                <Card key={vendor.id} className="card-hover">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                          <User className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <CardTitle className="text-lg">{vendor.name}</CardTitle>
                          <CardDescription>{vendor.specialties.join(', ')}</CardDescription>
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuItem onClick={() => setSelectedVendor(vendor)}>
                            <Eye className="mr-2 h-4 w-4" />
                            View Details
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Edit className="mr-2 h-4 w-4" />
                            Edit Vendor
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Phone className="mr-2 h-4 w-4" />
                            Call Vendor
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Mail className="mr-2 h-4 w-4" />
                            Send Email
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem className="text-red-600">
                            <Trash2 className="mr-2 h-4 w-4" />
                            Remove Vendor
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Rating</span>
                      <div className="flex items-center gap-1">
                        <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                        <span className="font-medium">{vendor.rating}</span>
                        <span className="text-sm text-gray-500">({vendor.totalJobs} jobs)</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Hourly Rate</span>
                      <span className="font-medium">{formatCurrency(vendor.hourlyRate)}/hr</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Response Time</span>
                      <span className="font-medium">{vendor.responseTime}h avg</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">Status</span>
                      {getVendorAvailabilityBadge(vendor.availability)}
                    </div>
                    
                    <div className="flex items-center gap-2">
                      {vendor.isVerified && (
                        <Badge variant="outline" className="text-green-600">
                          <Shield className="h-3 w-3 mr-1" />
                          Verified
                        </Badge>
                      )}
                      {vendor.insurance && (
                        <Badge variant="outline" className="text-blue-600">
                          <Award className="h-3 w-3 mr-1" />
                          Insured
                        </Badge>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Vendor Performance */}
              <Card>
                <CardHeader>
                  <CardTitle>Vendor Performance</CardTitle>
                  <CardDescription>
                    Top performing vendors this month
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analytics.vendorPerformance.map((vendor) => (
                      <div key={vendor.vendorId} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                        <div>
                          <div className="font-medium">{vendor.vendorName}</div>
                          <div className="text-sm text-gray-500">
                            {vendor.completedJobs} jobs completed
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="flex items-center gap-1">
                            <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                            <span className="font-medium">{vendor.averageRating}</span>
                          </div>
                          <div className="text-sm text-gray-500">
                            {vendor.averageResponseTime}h avg response
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Category Breakdown */}
              <Card>
                <CardHeader>
                  <CardTitle>Category Breakdown</CardTitle>
                  <CardDescription>
                    Maintenance requests by category
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {analytics.categoryBreakdown.map((category) => (
                      <div key={category.category} className="flex items-center justify-between">
                        <div>
                          <div className="font-medium">{category.category}</div>
                          <div className="text-sm text-gray-500">
                            {category.count} requests
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="font-medium">
                            {formatCurrency(category.totalCost)}
                          </div>
                          <div className="text-sm text-gray-500">
                            {formatCurrency(category.totalCost / category.count)} avg
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Maintenance Settings</CardTitle>
                <CardDescription>
                  Configure maintenance preferences and automation
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium">Auto-assign vendors</label>
                    <p className="text-sm text-gray-500">
                      Automatically assign work orders to available vendors
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Emergency response time</label>
                    <p className="text-sm text-gray-500">
                      Maximum time to respond to urgent requests
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Quality inspection required</label>
                    <p className="text-sm text-gray-500">
                      Require quality inspection for completed work
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>

      {/* Work Order Details Dialog */}
      <Dialog open={!!selectedWorkOrder} onOpenChange={() => setSelectedWorkOrder(null)}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Work Order Details</DialogTitle>
          </DialogHeader>
          {selectedWorkOrder && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">Work Order ID</label>
                  <p className="font-medium">#{selectedWorkOrder.id}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Status</label>
                  <div className="mt-1">{getStatusBadge(selectedWorkOrder.status)}</div>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Priority</label>
                  <div className="mt-1">{getPriorityBadge(selectedWorkOrder.priority)}</div>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Category</label>
                  <p className="font-medium">{selectedWorkOrder.category}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Property</label>
                  <p className="font-medium">Property {selectedWorkOrder.propertyId} - Unit {selectedWorkOrder.unitId}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Estimated Cost</label>
                  <p className="font-medium">{formatCurrency(selectedWorkOrder.estimatedCost)}</p>
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-500">Description</label>
                <p className="mt-1">{selectedWorkOrder.description}</p>
              </div>
              
              {selectedWorkOrder.notes && (
                <div>
                  <label className="text-sm font-medium text-gray-500">Notes</label>
                  <p className="mt-1">{selectedWorkOrder.notes}</p>
                </div>
              )}
              
              <Separator />
              
              <div className="flex gap-2">
                <Button variant="outline" className="flex-1">
                  <Edit className="h-4 w-4 mr-2" />
                  Edit Work Order
                </Button>
                <Button className="flex-1">
                  <Send className="h-4 w-4 mr-2" />
                  Assign Vendor
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Vendor Details Dialog */}
      <Dialog open={!!selectedVendor} onOpenChange={() => setSelectedVendor(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Vendor Details</DialogTitle>
          </DialogHeader>
          {selectedVendor && (
            <div className="space-y-6">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                  <User className="h-8 w-8 text-blue-600" />
                </div>
                <div>
                  <h3 className="text-xl font-bold">{selectedVendor.name}</h3>
                  <p className="text-gray-500">{selectedVendor.specialties.join(', ')}</p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">Email</label>
                  <p className="font-medium">{selectedVendor.email}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Phone</label>
                  <p className="font-medium">{selectedVendor.phone}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Address</label>
                  <p className="font-medium">{selectedVendor.address}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">License</label>
                  <p className="font-medium">{selectedVendor.license}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Hourly Rate</label>
                  <p className="font-medium">{formatCurrency(selectedVendor.hourlyRate)}/hr</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Response Time</label>
                  <p className="font-medium">{selectedVendor.responseTime}h average</p>
                </div>
              </div>
              
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-1">
                  <Star className="h-5 w-5 fill-yellow-400 text-yellow-400" />
                  <span className="font-medium">{selectedVendor.rating}</span>
                  <span className="text-gray-500">({selectedVendor.totalJobs} jobs)</span>
                </div>
                {getVendorAvailabilityBadge(selectedVendor.availability)}
              </div>
              
              <Separator />
              
              <div className="flex gap-2">
                <Button variant="outline" className="flex-1">
                  <Phone className="h-4 w-4 mr-2" />
                  Call Vendor
                </Button>
                <Button className="flex-1">
                  <Mail className="h-4 w-4 mr-2" />
                  Send Email
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </motion.div>
  );
} 